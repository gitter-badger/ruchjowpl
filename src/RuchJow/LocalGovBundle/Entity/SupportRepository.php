<?php

namespace RuchJow\LocalGovBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SupportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupportRepository extends EntityRepository
{

    /**
     * @param string $type
     * @param int    $id required, except for type 'country'
     *
     * @return Support[]
     */
    public function findByTerritorialUnitLevel($type, $id) {


        $qb = $this->createQueryBuilder('s');

        $joinCommune = false;
        $joinDistrict = false;
        $joinRegion = false;
        switch ($type) {
            case 'country':
                break;

            /** @noinspection PhpMissingBreakStatementInspection */
            case 'region':
                $joinRegion = true;
                $qb
                    ->andWhere($qb->expr()->eq('r.id', ':regionId'))
                    ->setParameter('regionId', $id);
                break;

            /** @noinspection PhpMissingBreakStatementInspection */
            case 'district':
                $joinDistrict = true;
                $qb
                    ->andWhere($qb->expr()->eq('d.id', ':districtId'))
                    ->setParameter('districtId', $id);
                break;

            case 'commune':
                $joinCommune = true;
                $qb
                    ->andWhere($qb->expr()->eq('c.id', ':communeId'))
                    ->setParameter('communeId', $id);
                break;

            default:
                throw new \InvalidArgumentException('Level type ' . $type . ' not supported!');
        }

        if ($joinCommune || $joinDistrict || $joinRegion) {
            $qb->join('s.commune', 'c');

            if ($joinDistrict || $joinRegion) {
                $qb->join('c.district', 'd');

                if ($joinRegion) {
                    $qb->join('d.region', 'r');
                }
            }
        }

        return $qb->getQuery()->getResult();
    }

    public function count()
    {

        $qb = $this->createQueryBuilder('s')
            ->select('count(s.id) cnt');


        $ret =  $qb->getQuery()->getSingleScalarResult();

        return intval($ret);
    }
}
