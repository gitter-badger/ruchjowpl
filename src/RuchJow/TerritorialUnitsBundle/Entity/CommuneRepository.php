<?php

namespace RuchJow\TerritorialUnitsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;

/**
 * CommuneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommuneRepository extends EntityRepository
{

    /**
     * @param string $communeName
     * @param string $districtName
     * @param string $regionName
     *
     * @return Commune[]
     */
    public function getByCommuneDistrictRegion($communeName, $districtName, $regionName)
    {
        $qb = $this->createQueryBuilder('c');

        $qb
            ->join('c.district', 'd')
            ->join('d.region', 'r')
            ->where($qb->expr()->eq('d.name', '?1'))
            ->andWhere($qb->expr()->eq('c.name', '?2'))
            ->andWhere($qb->expr()->eq('r.name', '?3'))
            ->setParameter(1, $districtName)
            ->setParameter(2, $communeName)
            ->setParameter(3, $regionName);

        $ret = $qb
            ->getQuery()
            ->getResult();

        return $ret;
    }


    /**
     * @param string $regionName
     * @param string $districtName
     * @param string $communeName
     * @param string $communeType
     *
     * @return Commune[]
     */
    public function findByRegionDistrictCommuneType($regionName = null, $districtName = null, $communeName = null, $communeType = null)
    {
        $query = $this->prepareRegionDistrictCommuneTypeQuery($regionName, $districtName, $communeName, $communeType);

        return $query->getResult();
    }


    /**
     * @param string $regionName
     * @param string $districtName
     * @param string $communeName
     * @param string $communeType
     *
     * @return Commune
     *
     * @throws NonUniqueResultException If the query result is not unique.
     * @throws NoResultException        If the query returned no result.
     */
    public function findOneByRegionDistrictCommuneType($regionName = null, $districtName = null, $communeName = null, $communeType = null)
    {
        $query = $this->prepareRegionDistrictCommuneTypeQuery($regionName, $districtName, $communeName, $communeType);

        return $query->getSingleResult();
    }


    protected function prepareRegionDistrictCommuneTypeQuery($regionName = null, $districtName = null, $communeName = null, $communeType = null)
    {
        $qb = $this->createQueryBuilder('c');

        if (!($regionName || $districtName || $communeName || $communeType)) {
            throw new \InvalidArgumentException('At least one argument must be provided');
        }

        if ($districtName || $regionName) {
            $qb->join('c.district', 'd');
        }

        if ($districtName) {
            $qb->andWhere($qb->expr()->eq('r.name', ':region_name'))
                ->setParameter('region_name', $regionName);
        }

        if ($regionName) {
            $qb->join('d.region', 'r')
                ->andWhere($qb->expr()->eq('r.name', ':region_name'))
                ->setParameter('region_name', $regionName);
        }

        if ($communeName) {
            $qb->andWhere($qb->expr()->eq('c.name', ':commune_name'))
                ->setParameter('commune_name', $communeName);
        }

        if ($communeType) {
            $qb->andWhere($qb->expr()->eq('c.type', ':commune_type'))
                ->setParameter('commune_type', $communeType);
        }


        return $qb->getQuery();
    }


    /**
     * @param     $code
     * @param int $limit
     *
     * @return Commune[]
     */
    public function findCommunesByPostCode($code, $limit = 0) {
        $code = mb_substr(str_replace('-', '', $code), 0, 5, 'UTF-8');
        $remainingDigits = 5 - mb_strlen($code);

        $code = (int) $code;
        $minId = $code * pow(10, $remainingDigits);
        $maxId = $minId + pow(10, $remainingDigits) - 1;

//        $qb = $this
//            ->getEntityManager()
//            ->getRepository('Commune')
//            ->createQueryBuilder('c');

        $qb = $this->createQueryBuilder('c');

        $qb->join('c.postCodes', 'p')
            ->select('c.id')
            ->where($qb->expr()->between('p.id', ':minId', ':maxId'))
            ->setParameter('minId', $minId)
            ->setParameter('maxId', $maxId)
            ->groupBy('c.id')
            ->orderBy('c.name');

//        $query = $qb->getQuery();
//
//        $query->setFetchMode("MyProject\User", "address", "EAGER");

        $res = $qb->getQuery()->getResult();
        if (empty($res)) {
            return array();
        }


        $ids = array();
        foreach ($res as $idArray) {
            $ids[] = $idArray['id'];
        }

        $qb = $this->createQueryBuilder('c');
        $qb->join('c.district', 'd')
            ->join('d.region', 'r')
            ->addSelect('d')
            ->addSelect('r')
            ->where($qb->expr()->in('c.id', $ids))
            ->orderBy('c.name');

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param     $name
     * @param int $limit
     *
     * @return Commune[]
     */
    public function findCommunesByName($name, $limit = 0) {

        $name = trim(preg_replace('/\s+/', ' ', $name));
        $nameParts = explode(' ', $name);

        $qb = $this->createQueryBuilder('c');

        $qb->join('c.district', 'd')
            ->join('d.region', 'r')
            ->addSelect('d')
            ->addSelect('r')
            ->orderBy('c.name');

        foreach ($nameParts as $key => $part) {
            $qb->andWhere($qb->expr()->like('c.name', ':part_' . $key))
                ->setParameter('part_' . $key, '%' . $part . '%');
        }

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }
}
